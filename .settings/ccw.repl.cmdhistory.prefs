cmdhistory=["foo" "foo [eric]" "foo" "foo XASD" "foo \\"Eric\\"" "hangman.core.foo" "foo" "(foo \\"Eric\\")" "hangman" "foo" "hangman[]" "(hangman )" "hangman" "(play \\"palavra secreta\\")" "(play)" "play" "(play \\"palavra secreta\\")" "play" "(play \\"secret\\")" "play" "(play \\"foo\\")" "play" "(play \\"foo\\")" "(foo \\"play\\")" "(bar \\"play\\")" "(hello \\"punk\\")" "(def greeting \\"Hello\\")" "(hello \\"er\\")" "(defn hello\\r\\n  \\"I don't do a whole lot.\\"\\r\\n  [x]\\r\\n  (println greeting \\" \\" x ))" "hello \\"Eric" "hello \\"Eric\\"" "(hello \\"Eric\\")" "(defn hello\\r\\n  \\"I don't do a whole lot.\\"\\r\\n  [x]\\r\\n  (println greeting x ))" "(hello \\"Eric\\")" "words" "(hello \\"Eric\\")" "clojure.set" "(javax.swing.JOptionPane/showMessageDialog nil \\"Hello World\\")" "\\"Hello World\\"" "(hello \\"name\\")" "(hello \\"World\\")" "(hello \\"Eric\\")" "lain repl" "lein repl" "(hello \\"EU\\")" " (hello \\"EU\\")" "(counter-app)" "hangman.core \\"hi\\"" "(hangman.core \\"hi\\")" "(.length words)" "(Math.random)" "(java.lang.Math/random)" "(.length hangman.main/words)" "(hangman.main/words)" "(hangman.main/words/length)" "(.size words)" "(.size hangman.main/words)" "(hangman.main/is-end-game?)" "(hangman.core/mistakes)" "'(hangman.main/mistakes)" "(hangman.main/mistakes)" "(javax.swing.JOptionPane/showMessageDialog nil head)" "(do (require 'midje.repl) (midje.repl/autotest))" "1" "(do (require 'midje.repl) (midje.repl/autotest))" "(pst *me)" "`(pst *me)" "(do (require 'midje.repl) (midje.repl/autotest))" "`(pst *me)" "(start-game)" "(hangman.main/start-game)" "`(hangman.main/start-game)" "(hangman.main/start-game)" "`(pst *me)" "(pst *me)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "\#{}" "123" "\#{1 2 3}" "(conj \#{1 2 3} 4)" "(def s \#{1 2 3})" "s" "(conj s 4)" "s" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(.toCharArray \\"string\\")" "(seq (.toCharArray \\"string\\"))" "(hangman.main/start-game)" "(hangman.main/include-hit ${} 1)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/include-hit ${} 1)" "(hangman.main/include-hit \#{} 1)" "(hangman.main/include-hit \#{} \\"1\\")" "(hangman.main/include-hit \#{1 2 3} \\"1\\")" "(hangman.main/include-hit \#{1 2 3} 1)" "(hangman.main/include-hit \#{\\"1\\" \\"2\\" \\"3\\"} 1)" "(hangman.main/include-hit \#{\\"1\\" \\"2\\" \\"3\\"} \\"1\\")" "(hangman.main/include-hit \#{\\"1\\" \\"2\\" \\"3\\"} '1)" "(hangman.main/include-hit \#{\\"1\\" \\"2\\" \\"3\\"} '\\"1\\")" "(hangman.main/include-hit \#{\\"1\\" \\"2\\" \\"3\\"} `\\"1\\")" "(hangman.main/include-hit '\#{\\"1\\" \\"2\\" \\"3\\"} \\"1\\")" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/obtem-set-chs \\"word\\")" "(require 'hangman.main)" "(hangman.main/obtem-set-chs \\"word\\")" "(hangman.main/start-game)" "(require 'hangman.main)" "(replace \\"hello word\\" \#\\"\\\\.\\" \\" \\")" "(replace \\"hello word\\" \#\\".\\" \\" \\")" "(clojure.string/replace \\"hello word\\" \#\\".\\" \\" \\")" "(clojure.string/replace \\"hello word\\" \#\\"\\\\.\\" \\" \\")" "(require 'hangman.main)" "(hangman.main/write-word \\"asdfg\\" \\"\\")" "(require 'hangman.main)" "(hangman.main/write-word \\"asdfg\\" \\"\\")" "(require 'hangman.main)" "(hangman.main/write-word \\"word\\" \\"x\\")" "(require 'hangman.main)" "(hangman.main/write-word \\"word\\" \\"x\\")" "(require 'hangman.main)" "(hangman.main/write-word \\"word\\" \\"x\\")" "(require 'hangman.main)" "(hangman.main/write-word \\"word\\" \\"x\\")" "(require 'hangman.main)" "(hangman.main/write-word \\"word\\" \\"x\\")" "(do (require 'midje.repl) (midje.repl/autotest))" "(hangman.main/write-word \\"word\\" \#{\\"o\\" \\"r\\"})" "${\\"p\\" \\"a\\"}" "\#{\\"p\\" \\"a\\"}" "(\#{\\"p\\" \\"a\\"})" "'(\#{\\"p\\" \\"a\\"})" "(let [x \#{\\"a\\" \\"b\\"} (x)])" "(let [x \#{\\"a\\" \\"b\\"}] (x))" "\#{1 2 3}" "(\#{1 2 3})" "(contains? \#{1 2 3} 1)" "(contains? \#{\\"a\\" \\"c\\" \\"v\\"} \\"a\\")" "(let [spaced \\"a\\"] (conj spaced \\"b\\"))" "(require 'hangman.main)" "(hangman.main/write-word \\"word\\" \#{\\"o\\" \\"r\\"})" "(hangman.main/write-word \\"word\\" '\#{\\"o\\" \\"r\\"})" "(hangman.main/write-word \\"word\\" `\#{\\"o\\" \\"r\\"})" "(require 'hangman.main)" "(hangman.main/write-word \\"word\\" `\#{\\"o\\" \\"r\\"})" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(seq \\"banana\\")" "(map (seq \\"banana\\"))" "(map (seq \\"banana\\") inc)" "(map inc (seq \\"banana\\"))" "(map \#(str % \\"asd\\") (seq \\"banana\\"))" "(map \#(str % \\"\\") (seq \\"banana\\"))" "(map \#(str % \\"-\\") (seq \\"banana\\"))" "(map \#(println % \\"-\\") (seq \\"banana\\"))" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game \\n  (request-word-swing) \\n  (ask-for-character-swing) \\n  (show-win-message-swing) \\n  (show-lose-meesage-swing))" "(hangman.main/start-game \\n  request-word-swing \\n(ask-for-character-swing) \\n(show-win-message-swing) \\n(show-lose-meesage-swing))" "(hangman.main/start-game \\n  (request-word-swing) \\n  (ask-for-character-swing) \\n  (show-win-message-swing) \\n  (show-lose-meesage-swing))" "(hangman.main/start-game \\n  '(request-word-swing) \\n  (ask-for-character-swing) \\n  (show-win-message-swing) \\n  (show-lose-meesage-swing))" "(hangman.main/start-game \\n  '(request-word-swing) \\n  '(ask-for-character-swing) \\n  '(show-win-message-swing) \\n  '(show-lose-meesage-swing))" "(hangman.main/start-game \\n  (request-word-swing) \\n  (ask-for-character-swing) \\n  (show-win-message-swing) \\n  (show-lose-meesage-swing))" "(hangman.main/start-game \\n  \#(request-word-swing) \\n  \#(ask-for-character-swing) \\n  \#(show-win-message-swing) \\n  \#(show-lose-meesage-swing))" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game)" "(require 'hangman.main)" "(hangman.main/start-game \\"swing\\")" "(require 'hangman.main)" "(hangman.main/start-game \\"swing\\")" "(update-in {\:hits \#{}} [\:hits] conj c)" "(update-in {\:hits \#{}} [\:hits] conj \\"b\\")" "(update-in {\:hits {\:key \#{}}} [\:hits \:key] conj \\"b\\")" "(require 'hangman.main)" "(hangman.main/start-hangmain \\"swing\\")" "(require 'hangman.main)" "(hangman.main/start-hangmain \\"swing\\")" "(require 'hangman.main)" "(hangman.main/start-hangmain \\"swing\\")" "(apply str (map \#(if(contains? \#{\\"s\\"} %) % \\"_ \\") (seq \\"swing\\")))" "(apply str (map \#(if(contains? \#{s} %) % \\"_ \\") (seq \\"swing\\")))" "(apply str (map \#(if(contains? \#{'s'} %) % \\"_ \\") (seq \\"swing\\")))" "(apply str (map \#(if(contains? \#{\\\\s} %) % \\"_ \\") (seq \\"swing\\")))" "(apply str (map \#(if(contains? \#{\\\\s \\\\w} %) % \\"_ \\") (seq \\"swing\\")))" "(hangman.main/start-hangmain \\"swing\\")" "(require 'hangman.main)" "(hangman.main/start-hangmain \\"swing\\")" "(get \#{\:key \\"value\\"} \:key)" "(get {\:key \\"value\\"} \:key)" "(\:key {\:key \\"value\\"})" "({\:key \\"value\\"} \:key)" "(\:key nil)" "(nil \:key )" "(3 [\\"1\\" \\"2\\" \\"3\\" \\"4\\"])" "(require 'hangman.main)" "(hangman.main/start-hangmain \\"swing\\")" "(-> {\:key 1} {\:key 0 \:map \\"m\\"})" "(-> {\:key 1} & {\:key 0 \:map \\"m\\"})" "(-> 3 [1 2 4])" "(-> 3 [1 2 4 5])" "(-> 3 \\"game\\")" "(-> 3 (sec \\"game\\"))" "(-> 3 (seq \\"game\\"))" "(-> 3 (assoc {\:game}))" "(-> {\:game 3} (assoc {\:game}))" "(-> {\:game 3} assoc {\:game})" "(-> [\:game 3] (assoc [\:game]))" "(-> [\:game] (assoc [\:game]))" "(-> [\:game] [\:game 3])" "(->> [\:game] [\:game 3])" "(->> \:game [\:game 3])" "(-> \:game [\:game 3])" "(-> \:game ([\:game 3]))" "(-> \:game [\:game 3])" "(-> 3 [0 1 2 3 4 5])" "(->> 3 [0 1 2 3 4 5])" "(require 'hangman.main)" "(hangman.main/start-hangmain \\"swing\\")" "(hangman.main/start-hangmain\! \\"swing\\")" "(assoc {} \:key \\"value\\")" "(assoc (assoc {} \:key \\"value\\") \:key2 \\"value2\\")" "(-> {} \\n    (assoc \:key \\"value\\"))" "(-> {} \\n    (assoc \:key \\"value\\")\\n    (assoc \:key2 \\"value2\\"))" "(->> {} \\n    (assoc \:key \\"value\\")\\n    (assoc \:key2 \\"value2\\"))" "(-> {} \\n    (assoc \:key \\"value\\")\\n    (assoc \:key2 \\"value2\\"))" "(->> \\"value\\" \\n    (assoc {} \:key)\\n    (assoc {} \:key2))" "(do (require 'midje.repl) (midje.repl/autotest))" "(require 'hangman.main)" "(do (require 'midje.repl) (midje.repl/autotest))" "(println \\"oi\\")" "(doseq [s \\"wspx\\"] (println s))" "(do (require 'midje.repl) (midje.repl/autotest))" "(doseq [s \\"wspx\\"] (println s))" "(doseq [s \\"wspx\\"] s)" "(doseq [s \\"wpsk\\"] (with-attempt s))" "(doseq [s \\"aligator\\"] s)" "(doseq [s \\"aligator\\"] (println s))" "(doseq [s \\"aligtor\\"] (println s))" "(-> (new-game \\"word\\") )"]
eclipse.preferences.version=1
